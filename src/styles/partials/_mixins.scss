@use "BreakPoints" as *;

/**
 * Responsive Mixin
 * A Sass mixin for handling responsive design with various breakpoints and types.
 *
 * @param {string} $type - The type of responsive query (min, max, minMax, custom, portrait, landscape).
 * @param {string} [$firstBreakPoint=xs] - The first breakpoint for the responsive query.
 * @param {string} [$secondBreakPoint=xxl] - The second breakpoint for minMax queries or custom queries.
 *
 * @example
 * // Usage example for a minimum width query:
 * @include responsive(min, md) {
 *   // Your styles here
 * }
 *
 * @example
 * // Usage example for a maximum width query:
 * @include responsive(max, lg) {
 *   // Your styles here
 * }
 *
 * @example
 * // Usage example for a range of widths query:
 * @include responsive(minMax, sm, lg) {
 *   // Your styles here
 * }
 *
 * @example
 * // Usage example for a custom width range query:
 * @include responsive(custom, 600px, 1200px) {
 *   // Your styles here
 * }
 *
 * @example
 * // Usage example for a portrait orientation query:
 * @include responsive(portrait) {
 *   // Your styles here
 * }
 *
 * @example
 * // Usage example for a landscape orientation query:
 * @include responsive(landscape) {
 *   // Your styles here
 * }
 *
 * @throws {Warning} If the provided breakpoints or types are not supported.
 */

@mixin responsive($type: min, $firstBreakPoint: xs, $secondBreakPoint: xl) {
    $breakPoints: (
        xs: $xs,
        sm: $sm,
        md: $md,
        lg: $lg,
        xl: $xl,
        xxl: $xxl,
        xxxl: $xxxl,
    );

    $types: (
        min: "min",
        max: "max",
        minMax: "minMax",
    );

    $customTypes: (
        custom: "custom",
        portrait: "portrait",
        landscape: "landscape",
    );

    // Normal types
    @if map-has-key($types, $type) {
        @if map-has-key($breakPoints, $firstBreakPoint) {
            @if map-has-key($breakPoints, $secondBreakPoint) {
                // Default values
                $firstValue: map-get($breakPoints, $firstBreakPoint);
                $secondValue: map-get($breakPoints, $secondBreakPoint);

                @if $type == min {
                    @media only screen and (min-width: $firstValue) {
                        @content;
                    }
                }

                @if $type == max {
                    @media only screen and (max-width: $firstValue) {
                        @content;
                    }
                }

                @if $type == minMax {
                    // Ensure the second breakpoint is greater than the first for minMax queries
                    @if $secondValue < $firstValue {
                        $temp: $secondValue;
                        $secondValue: $firstValue;
                        $firstValue: $temp;
                        @warn "Swapped values for minMax query to ensure the second breakpoint is greater than the first.";
                    }
                    @media only screen and (min-width: $firstValue) and (max-width: $secondValue) {
                        @content;
                    }
                }
            } @else {
                @warn "Second BreakPoint #{$secondBreakPoint} is not supported. Supported BreakPoints are: #{map-keys($breakPoints)}";
            }
        } @else {
            @warn "First BreakPoint #{$firstBreakPoint} is not supported. Supported BreakPoints are: #{map-keys($breakPoints)}";
        }
        // Custom types
    } @else if map-has-key($customTypes, $type) {
        @if $type == custom {
            // Ensure the second breakpoint is greater than the first for custom queries
            @if $secondBreakPoint < $firstBreakPoint {
                $temp: $secondBreakPoint;
                $secondBreakPoint: $firstBreakPoint;
                $firstBreakPoint: $temp;
                @warn "Swapped values for custom query to ensure the second breakpoint is greater than the first.";
            }
            @media only screen and (min-width: $firstBreakPoint) and (max-width: $secondBreakPoint) {
                @content;
            }
        }

        @if $type == portrait {
            @media (orientation: portrait) {
                @content;
            }
        }

        @if $type == landscape {
            @media (orientation: landscape) {
                @content;
            }
        }
    } @else {
        @warn "#{$type} is not supported. Supported normal types are: #{map-keys($types)} | Supported custom types are: #{map-keys($customTypes)}";
    }
}

/**
 * A mixin to create a responsive container with customizable padding.
 *
 * @param {string} $padding - The padding value to apply.
 *
 * @example
 * // Usage:
 * @include container(120px)
 */

@mixin container($padding: 80px) {
    width: 100%;
    max-width: 1440px;
    margin-inline: auto;

    @include responsive(max, "xl") {
        padding-inline: $padding;
    }

    @include responsive(max, "md") {
        padding-inline: 40px;
    }

    @include responsive(max, "sm") {
        padding-inline: 20px;
    }
}
